(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.logtown = factory());
}(this, (function () { 'use strict';

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

// Stack trace format :
// https://github.com/v8/v8/wiki/Stack%20Trace%20API

var stackReg = /at\s+(.*)\s+\((.*):(\d*):(\d*)\)/i;
var stackReg2 = /at\s+()(.*):(\d*):(\d*)/i;

var stacktrace = (function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$prependRest = _ref.prependRest,
      prependRest = _ref$prependRest === undefined ? true : _ref$prependRest;

  return function (id, level, stats) {
    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    var newStats = JSON.parse(JSON.stringify(stats)); // quick deep cloning
    var newRest = rest.slice();

    var err = rest.find(function (obj) {
      return obj instanceof Error;
    });

    var stacklist = (err || new Error()).stack.split('\n').slice(1);
    var s = stacklist[0];
    var sp = stackReg.exec(s) || stackReg2.exec(s);

    if (sp && sp.length === 5) {
      newStats.method = sp[1];
      newStats.path = sp[2];
      newStats.line = parseInt(sp[3], 10);
      newStats.pos = sp[4];
      newStats.file = newStats.path.split(/[\\/]/).pop();

      if (prependRest) {
        newRest.splice(0, 0, '(' + newStats.path + ':' + newStats.line + ')');
      }
    }

    return [id, level, newStats].concat(toConsumableArray(newRest));
  };
});

return stacktrace;

})));
