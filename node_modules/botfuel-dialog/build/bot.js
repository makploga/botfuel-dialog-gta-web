'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Logger = require('logtown');
var AdapterResolver = require('./adapter-resolver');
var DialogManager = require('./dialog-manager');
var MemoryBrain = require('./brains/memory-brain');
var MongoBrain = require('./brains/mongo-brain');
var Nlu = require('./nlu');

var _require = require('./config'),
    getConfiguration = _require.getConfiguration;

var AuthenticationError = require('./errors/authentication-error');
var DialogError = require('./errors/dialog-error');
var ResolutionError = require('./errors/resolution-error');

var _require2 = require('./utils/environment'),
    checkCredentials = _require2.checkCredentials;

var logger = Logger.getLogger('Bot');

/**
 * This is the bot main class.
 *
 * A bot has :
 * - an {@link Adapter},
 * - a {@link Brain},
 * - a {@link Nlu} (Natural Language Understanding) module,
 * - a {@link DialogManager}.
 */

var Bot = function () {
  /**
   * @constructor
   * @param {object} config - the bot configuration
   */
  function Bot(config) {
    _classCallCheck(this, Bot);

    this.config = getConfiguration(config);
    logger.debug('constructor', this.config);
    checkCredentials(this.config);
    this.brain = this.getBrain(this.config);
    this.nlu = new Nlu(this.config);
    this.dm = new DialogManager(this.brain, this.config);
    this.adapter = new AdapterResolver(this).resolve(this.config.adapter);
  }

  /**
   * Initializes the bot.
   * @async
   * @private
   * @returns {Promise.<void>}
   */


  _createClass(Bot, [{
    key: 'init',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.brain.init();

              case 2:
                _context.next = 4;
                return this.nlu.init();

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _ref.apply(this, arguments);
      }

      return init;
    }()

    /**
     * Gets brain instance
     * @param {Object} config - the config
     * @returns {Brain}
     */

  }, {
    key: 'getBrain',
    value: function getBrain(config) {
      switch (config.brain) {
        case 'mongo':
          return new MongoBrain(config);
        case 'memory':
        default:
          return new MemoryBrain(config);
      }
    }

    /**
     * Handles errors.
     * @param {Object} error - the error
     * @returns {void}
     */

  }, {
    key: 'handleError',
    value: function handleError(error) {
      if (error instanceof AuthenticationError) {
        logger.error('Botfuel API authentication failed!');
        logger.error('Please check your app’s credentials and that its plan limits haven’t been reached on https://api.botfuel.io');
      } else if (error instanceof ResolutionError) {
        logger.error('Could not resolve \'' + error.name + '\'');
      } else if (error instanceof DialogError) {
        logger.error('Could not execute dialog \'' + error.name + '\'');
      }
      throw error;
    }

    /**
     * Runs the bot.
     * @async
     * @returns {Promise.<void>}
     */

  }, {
    key: 'run',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                logger.debug('run');
                _context2.prev = 1;
                _context2.next = 4;
                return this.init();

              case 4:
                _context2.next = 6;
                return this.adapter.run();

              case 6:
                _context2.next = 11;
                break;

              case 8:
                _context2.prev = 8;
                _context2.t0 = _context2['catch'](1);

                this.handleError(_context2.t0);

              case 11:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[1, 8]]);
      }));

      function run() {
        return _ref2.apply(this, arguments);
      }

      return run;
    }()

    /**
     * Plays user messages (only available with the {@link TestAdapter}).
     * @async
     * @param {string[]} userMessages - the user messages
     * @returns {Promise.<void>}
     */

  }, {
    key: 'play',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(userMessages) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                logger.debug('play', userMessages);
                _context3.prev = 1;
                _context3.next = 4;
                return this.init();

              case 4:
                _context3.next = 6;
                return this.adapter.play(userMessages);

              case 6:
                _context3.next = 11;
                break;

              case 8:
                _context3.prev = 8;
                _context3.t0 = _context3['catch'](1);

                this.handleError(_context3.t0);

              case 11:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this, [[1, 8]]);
      }));

      function play(_x) {
        return _ref3.apply(this, arguments);
      }

      return play;
    }()

    /**
     * Clean the bot brain.
     * @async
     * @returns {Promise.<void>}
     */

  }, {
    key: 'clean',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                logger.debug('clean');
                _context4.prev = 1;
                _context4.next = 4;
                return this.brain.init();

              case 4:
                _context4.next = 6;
                return this.brain.clean();

              case 6:
                _context4.next = 11;
                break;

              case 8:
                _context4.prev = 8;
                _context4.t0 = _context4['catch'](1);

                this.handleError(_context4.t0);

              case 11:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this, [[1, 8]]);
      }));

      function clean() {
        return _ref4.apply(this, arguments);
      }

      return clean;
    }()

    /**
     * Responds to the user.
     * @async
     * @param {Object} userMessage - the user message
     * @returns {Promise.<void>}
     */

  }, {
    key: 'respond',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(userMessage) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                logger.debug('respond', userMessage);
                _context5.t0 = userMessage.type;
                _context5.next = _context5.t0 === 'postback' ? 4 : _context5.t0 === 'image' ? 7 : _context5.t0 === 'text' ? 10 : 10;
                break;

              case 4:
                _context5.next = 6;
                return this.respondWhenPostback(userMessage);

              case 6:
                return _context5.abrupt('break', 12);

              case 7:
                _context5.next = 9;
                return this.respondWhenImage(userMessage);

              case 9:
                return _context5.abrupt('break', 12);

              case 10:
                _context5.next = 12;
                return this.respondWhenText(userMessage);

              case 12:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function respond(_x2) {
        return _ref5.apply(this, arguments);
      }

      return respond;
    }()

    /**
     * Computes the responses for a user message of type text.
     * @async
     * @private
     * @param {Object} userMessage - the user text message
     * @returns {Promise.<void>}
     */

  }, {
    key: 'respondWhenText',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(userMessage) {
        var _ref7, intents, entities;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                logger.debug('respondWhenText', userMessage);
                _context6.next = 3;
                return this.nlu.compute(userMessage.payload.value, {
                  brain: this.brain,
                  userMessage: userMessage
                });

              case 3:
                _ref7 = _context6.sent;
                intents = _ref7.intents;
                entities = _ref7.entities;

                logger.debug('respondWhenText: intents, entities', intents, entities);
                _context6.next = 9;
                return this.dm.executeIntents(this.adapter, userMessage, intents, entities);

              case 9:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function respondWhenText(_x3) {
        return _ref6.apply(this, arguments);
      }

      return respondWhenText;
    }()

    /**
     * Computes the responses for a user message of type postback.
     * @async
     * @private
     * @param {Object} userMessage - the user postback message
     * @returns {void}
     */

  }, {
    key: 'respondWhenPostback',
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(userMessage) {
        var dialog;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                logger.debug('respondWhenPostback', userMessage);
                dialog = {
                  name: userMessage.payload.value.dialog,
                  entities: userMessage.payload.value.entities
                };
                _context7.next = 4;
                return this.dm.executeDialogs(this.adapter, userMessage, [dialog]);

              case 4:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function respondWhenPostback(_x4) {
        return _ref8.apply(this, arguments);
      }

      return respondWhenPostback;
    }()

    /**
     * Computes the responses for a user message of type image.
     * @async
     * @private
     * @param {object} userMessage - the user image message
     * @returns {void}
     */

  }, {
    key: 'respondWhenImage',
    value: function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(userMessage) {
        var dialog;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                logger.debug('respondWhenImage', userMessage);
                dialog = {
                  name: 'image',
                  entities: [{ url: userMessage.payload.value.url }]
                };
                _context8.next = 4;
                return this.dm.executeDialogs(this.adapter, userMessage, [dialog]);

              case 4:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function respondWhenImage(_x5) {
        return _ref9.apply(this, arguments);
      }

      return respondWhenImage;
    }()
  }]);

  return Bot;
}();

module.exports = Bot;