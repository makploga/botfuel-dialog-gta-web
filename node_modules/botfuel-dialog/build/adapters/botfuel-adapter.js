'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = require('logtown')('BotfuelAdapter');
var WebAdapter = require('./web-adapter');

var CHAT_SERVER_URL = process.env.CHAT_SERVER || 'https://webchat.botfuel.io';

/**
 * Adapter for Botfuel's webchat.
 * @extends WebAdapter
 */

var BotfuelAdapter = function (_WebAdapter) {
  _inherits(BotfuelAdapter, _WebAdapter);

  function BotfuelAdapter() {
    _classCallCheck(this, BotfuelAdapter);

    return _possibleConstructorReturn(this, (BotfuelAdapter.__proto__ || Object.getPrototypeOf(BotfuelAdapter)).apply(this, arguments));
  }

  _createClass(BotfuelAdapter, [{
    key: 'handleRequest',

    /** @inheritDoc */
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('handleRequest', req.body);
                res.sendStatus(200);
                _context.next = 4;
                return this.handleMessage(req.body);

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function handleRequest(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return handleRequest;
    }()

    /** @inheritDoc */

  }, {
    key: 'getUri',
    value: function getUri(botMessage) {
      return CHAT_SERVER_URL + '/bots/' + process.env.BOTFUEL_APP_TOKEN + '/users/' + botMessage.user + '/conversation/messages';
    }

    /** @inheritDoc */

  }, {
    key: 'getQs',
    value: function getQs() {
      return {};
    }

    /** @inheritDoc */

  }, {
    key: 'getBody',
    value: function getBody(botMessage) {
      return botMessage;
    }
  }]);

  return BotfuelAdapter;
}(WebAdapter);

module.exports = BotfuelAdapter;