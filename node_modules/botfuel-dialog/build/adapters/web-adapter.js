'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var fs = require('fs');
var express = require('express');
var exphbs = require('express-handlebars');
var rp = require('request-promise-native');
var bodyParser = require('body-parser');
var logger = require('logtown')('WebAdapter');
var Handlebars = require('handlebars');
var MissingImplementationError = require('../errors/missing-implementation-error');
var Adapter = require('./adapter');

/**
 * Generic web adapter (to be subclassed), it serves:
 * - /webhook : requests to the bot
 * - /static: static files under src/static
 * - /templates: handlebars templates under src/templates
 * @extends Adapter
 */

var WebAdapter = function (_Adapter) {
  _inherits(WebAdapter, _Adapter);

  function WebAdapter() {
    _classCallCheck(this, WebAdapter);

    return _possibleConstructorReturn(this, (WebAdapter.__proto__ || Object.getPrototypeOf(WebAdapter)).apply(this, arguments));
  }

  _createClass(WebAdapter, [{
    key: 'run',

    /** @inheritDoc */
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var app, hbs, port;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('run');
                app = express();

                app.use(bodyParser.json());
                app.use('/static', express.static('src/static'));
                hbs = exphbs.create({});

                app.engine('handlebars', hbs.engine);
                app.set('view engine', 'handlebars');
                app.set('views', 'src/templates');
                this.createRoutes(app);
                port = process.env.PORT || process.env.BOTFUEL_ADAPTER_PORT || 5000;

                app.listen(port, function () {
                  return logger.debug('run: listening on port', port);
                });

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function run() {
        return _ref.apply(this, arguments);
      }

      return run;
    }()

    /**
     * Creates routes.
     * @param {Object} app - the express app
     * @returns {void}
     */

  }, {
    key: 'createRoutes',
    value: function createRoutes(app) {
      var _this2 = this;

      logger.debug('createRoutes');
      app.post('/webhook', function (req, res) {
        return _this2.handleRequest(req, res);
      });
      app.get('/templates/:id', function (req, res) {
        return _this2.handleTemplate(req, res);
      });
    }

    /**
     * Webhook used for handling requests to the bot.
     * @async
     * @param {Object} req - the request object
     * @param {Object} res - the response object
     * @returns {Promise.<void>}
     */

  }, {
    key: 'handleRequest',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function handleRequest() {
        return _ref2.apply(this, arguments);
      }

      return handleRequest;
    }()

    /**
     * Webhook used for handling template requests.
     * @async
     * @param {Object} req - the request object
     * @param {Object} res - the response object
     * @returns {Promise.<void>}
     */

  }, {
    key: 'handleTemplate',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(req, res) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                logger.debug('handleTemplate', { id: req.params.id, query: req.query });
                res.render(req.params.id, req.query, function (err, html) {
                  if (err) {
                    logger.error('Could not render the handlebars template: ' + req.params.id);
                    res.status(400).send(err);
                  } else {
                    res.status(200).send(html);
                  }
                });

              case 2:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function handleTemplate(_x, _x2) {
        return _ref3.apply(this, arguments);
      }

      return handleTemplate;
    }()

    /** @inheritDoc */

  }, {
    key: 'sendMessage',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(botMessage) {
        var requestOptions, options, res;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                requestOptions = {
                  uri: this.getUri(botMessage),
                  qs: this.getQs(),
                  body: this.getBody(botMessage)
                };
                options = Object.assign({ method: 'POST', json: true }, requestOptions);
                _context4.prev = 2;
                _context4.next = 5;
                return rp(options).promise();

              case 5:
                res = _context4.sent;

                if (res.statusCode && res.statusCode !== 200) {
                  // not handled on messenger
                  logger.error('postResponse: KO', res);
                } else {
                  logger.debug('postResponse: OK');
                }
                _context4.next = 12;
                break;

              case 9:
                _context4.prev = 9;
                _context4.t0 = _context4['catch'](2);

                // TODO: is this what we want?
                logger.error('postResponse: catch KO', _context4.t0.message || _context4.t0.error || _context4.t0);

              case 12:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this, [[2, 9]]);
      }));

      function sendMessage(_x3) {
        return _ref4.apply(this, arguments);
      }

      return sendMessage;
    }()
  }]);

  return WebAdapter;
}(Adapter);

module.exports = WebAdapter;