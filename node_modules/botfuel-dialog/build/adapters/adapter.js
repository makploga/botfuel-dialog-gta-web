'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = require('logtown')('Adapter');
var MissingImplementationError = require('../errors/missing-implementation-error');
var MiddlewareManager = require('../middleware-manager');

/**
 * An adapter adapts the messages to the messaging platform.
 */

var Adapter = function () {
  /**
   * @constructor
   * @param {Object} bot - the bot
   */
  function Adapter(bot) {
    _classCallCheck(this, Adapter);

    logger.debug('constructor');
    this.bot = bot;
    this.config = bot.config;
    this.middlewareManager = new MiddlewareManager(bot);
  }

  /**
   * Plays some user messages.
   * This adapter is only implemented by the {@link TestAdapter}.
   * This method is called by the {@link Bot}'s play method.
   * @abstract
   * @async
   * @param {Object[]} userMessages - the user messages
   * @returns {Promise.<void>}
   */


  _createClass(Adapter, [{
    key: 'play',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(userMessages) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('play', userMessages);
                throw new MissingImplementationError();

              case 2:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function play(_x) {
        return _ref.apply(this, arguments);
      }

      return play;
    }()

    /**
     * Adapter's method for running the bot.
     * This method is called by the {@link Bot}'s run method.
     * @abstract
     * @async
     * @returns {Promise.<void>}
     */

  }, {
    key: 'run',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                logger.debug('run');
                throw new MissingImplementationError();

              case 2:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function run() {
        return _ref2.apply(this, arguments);
      }

      return run;
    }()

    /**
     * Iterates over the bot messages and send them to the messaging platform.
     * @async
     * @param {Object[]} botMessages - the bot messages
     * @returns {Promise.<void>}
     */

  }, {
    key: 'send',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(botMessages) {
        var _this = this;

        var context;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                logger.debug('send', botMessages);
                context = {
                  user: botMessages[0] && botMessages[0].user,
                  brain: this.bot.brain,
                  botMessages: botMessages,
                  config: this.bot.config
                };
                _context4.next = 4;
                return this.middlewareManager.out(context, _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, botMessage;

                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _iteratorNormalCompletion = true;
                          _didIteratorError = false;
                          _iteratorError = undefined;
                          _context3.prev = 3;
                          _iterator = botMessages[Symbol.iterator]();

                        case 5:
                          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                            _context3.next = 12;
                            break;
                          }

                          botMessage = _step.value;
                          _context3.next = 9;
                          return _this.sendMessage(botMessage);

                        case 9:
                          _iteratorNormalCompletion = true;
                          _context3.next = 5;
                          break;

                        case 12:
                          _context3.next = 18;
                          break;

                        case 14:
                          _context3.prev = 14;
                          _context3.t0 = _context3['catch'](3);
                          _didIteratorError = true;
                          _iteratorError = _context3.t0;

                        case 18:
                          _context3.prev = 18;
                          _context3.prev = 19;

                          if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                          }

                        case 21:
                          _context3.prev = 21;

                          if (!_didIteratorError) {
                            _context3.next = 24;
                            break;
                          }

                          throw _iteratorError;

                        case 24:
                          return _context3.finish(21);

                        case 25:
                          return _context3.finish(18);

                        case 26:
                        case 'end':
                          return _context3.stop();
                      }
                    }
                  }, _callee3, _this, [[3, 14, 18, 26], [19,, 21, 25]]);
                })));

              case 4:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function send(_x2) {
        return _ref3.apply(this, arguments);
      }

      return send;
    }()

    /**
     * Handles a user message.
     * @async
     * @param {Object} userMessage - the user message
     * @returns {Promise.<void>}
     */

  }, {
    key: 'handleMessage',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(userMessage) {
        var _this2 = this;

        var context;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                logger.debug('handleMessage', userMessage);
                _context6.next = 3;
                return this.initUserIfNecessary(userMessage.user);

              case 3:
                context = {
                  brain: this.bot.brain,
                  userMessage: userMessage,
                  config: this.bot.config
                };
                _context6.next = 6;
                return this.middlewareManager.in(context, _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.next = 2;
                          return _this2.bot.respond(userMessage);

                        case 2:
                        case 'end':
                          return _context5.stop();
                      }
                    }
                  }, _callee5, _this2);
                })));

              case 6:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function handleMessage(_x3) {
        return _ref5.apply(this, arguments);
      }

      return handleMessage;
    }()

    /**
     * Inits the user if necessary.
     * Calls the corresponding method of the brain.
     * Adapters can add specific behaviour.
     * @async
     * @param {int} userId - the user id
     * @returns {Promise.<void>}
     */

  }, {
    key: 'initUserIfNecessary',
    value: function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(userId) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                logger.debug('initUserIfNecessary', userId);
                _context7.next = 3;
                return this.bot.brain.initUserIfNecessary(userId);

              case 3:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function initUserIfNecessary(_x4) {
        return _ref7.apply(this, arguments);
      }

      return initUserIfNecessary;
    }()

    /**
     * Sends a single bot message to the messaging platform.
     * @abstract
     * @async
     * @param {Object} botMessage - the bot message
     * @returns {Promise.<void>}
     */

  }, {
    key: 'sendMessage',
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function sendMessage() {
        return _ref8.apply(this, arguments);
      }

      return sendMessage;
    }()
  }]);

  return Adapter;
}();

module.exports = Adapter;