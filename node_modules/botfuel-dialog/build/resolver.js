'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var fs = require('fs');
var logger = require('logtown')('Resolver');
var ResolutionError = require('./errors/resolution-error');

/**
 * The adapter resolver resolves the adapter at startup.
 */

var Resolver = function () {
  /**
   * @constructor
   * @param {Object} config - the bot config
   * @param {String} kind - the kind of objects we want to resolve
   */
  function Resolver(config, kind) {
    _classCallCheck(this, Resolver);

    this.config = config;
    this.kind = kind;
    this.path = config.path + '/src/' + kind + 's';
    this.localPath = __dirname + '/' + kind + 's';
  }

  /**
   * Gets the path for a given name.
   * @param {String} name - the adapter name
   * @returns {String|null} the path if exists or null
   */


  _createClass(Resolver, [{
    key: 'getPath',
    value: function getPath(name) {
      logger.debug('getPath');
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.getPaths(name)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var path = _step.value;

          logger.debug('getPath: test path', path);
          if (fs.existsSync(path)) {
            logger.debug('getPath: existing path', path);
            return path;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    }

    /**
     * Resolves the adapter for a given name.
     * @param {String} name - the adapter name
     * @returns {Adapter|null} the adapter instance or null
     */

  }, {
    key: 'resolve',
    value: function resolve(name) {
      logger.debug('resolve', name);
      var path = this.getPath(name);
      if (path) {
        var Resolved = require(path);
        return this.resolutionSucceeded(Resolved);
      }
      throw new ResolutionError({
        kind: this.kind,
        name: name,
        paths: this.getPaths(name)
      });
    }
  }]);

  return Resolver;
}();

module.exports = Resolver;