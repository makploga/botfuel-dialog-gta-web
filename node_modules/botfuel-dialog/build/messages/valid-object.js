'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var validUrl = require('valid-url');
var MessageError = require('../errors/message-error');
var MissingImplementationError = require('../errors/missing-implementation-error');

/**
 * An object that can be validated.
 */

var ValidObject = function () {
  function ValidObject() {
    _classCallCheck(this, ValidObject);
  }

  _createClass(ValidObject, [{
    key: 'validate',

    /**
     * Validates the object.
     * @returns {void}
     */
    value: function validate() {
      throw new MissingImplementationError();
    }

    /**
     * Validates that a value is a string.
     * @param {String} name - the type of the object being validated
     * @param {*} value - the value being validated
     * @returns {void}
     */

  }, {
    key: 'validateString',
    value: function validateString(name, value) {
      if (!(typeof value === 'string')) {
        throw new MessageError({
          name: name,
          message: '\'' + value + '\' should be a string'
        });
      }
    }

    /**
     * Validates that a value is a url.
     * @param {String} name - the type of the object being validated
     * @param {*} value - the value being validated
     * @returns {void}
     */

  }, {
    key: 'validateUrl',
    value: function validateUrl(name, value) {
      if (!validUrl.isUri(value)) {
        throw new MessageError({
          name: name,
          message: '\'' + value + '\' should be a url'
        });
      }
    }

    /**
     * Validates that a value is an array
     * @param {String} name - the type of the object being validated
     * @param {*} value - the value being validated
     * @returns {void}
     */

  }, {
    key: 'validateArray',
    value: function validateArray(name, value) {
      if (!Array.isArray(value)) {
        throw new MessageError({
          name: name,
          message: '\'' + value + '\' should be an array'
        });
      }
    }
  }]);

  return ValidObject;
}();

module.exports = ValidObject;