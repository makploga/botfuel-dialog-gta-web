'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MessageError = require('../errors/message-error');
var Action = require('./action');
var Message = require('./message');

/**
 * A message made of actions.
 * @extends Message
 */

var ActionsMessage = function (_Message) {
  _inherits(ActionsMessage, _Message);

  // TODO: fix redundancy with card

  /**
   * @constructor
   * @param {Object[]} actions - the actions
   * @param {Object} options - the message options
   */
  function ActionsMessage(actions, options) {
    _classCallCheck(this, ActionsMessage);

    var _this = _possibleConstructorReturn(this, (ActionsMessage.__proto__ || Object.getPrototypeOf(ActionsMessage)).call(this, 'actions', 'bot', actions, options));

    _this.validate();
    return _this;
  }

  /** @inheritDoc */


  _createClass(ActionsMessage, [{
    key: 'validate',
    value: function validate() {
      _get(ActionsMessage.prototype.__proto__ || Object.getPrototypeOf(ActionsMessage.prototype), 'validate', this).call(this);
      this.validateActions(this.type, this.value);
    }

    /**
     * Validates that a value is an array of actions.
     * @param {String} name - the type of the object being validated
     * @param {*} actions - the value being validated
     * @returns {void}
     */

  }, {
    key: 'validateActions',
    value: function validateActions(name, actions) {
      this.validateArray(name, actions);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = actions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var action = _step.value;

          if (action instanceof Action) {
            action.validate();
          } else {
            throw new MessageError({
              name: this.type,
              message: 'Object \'' + JSON.stringify(action) + '\' should be of type Action\''
            });
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    /** @inheritDoc */

  }, {
    key: 'valueAsJson',
    value: function valueAsJson() {
      return this.value.map(function (action) {
        return action.toJson();
      });
    }
  }]);

  return ActionsMessage;
}(Message);

module.exports = ActionsMessage;