#!/usr/bin/env node
'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require('babel-polyfill');

var logger = require('logtown')('Clean');
var Bot = require('./bot');

var _require = require('./config'),
    resolveConfigFile = _require.resolveConfigFile;

_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var config;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          config = resolveConfigFile(process.argv[2]);
          _context.next = 4;
          return new Bot(config).clean();

        case 4:
          logger.info('Cleaning done.');
          _context.next = 10;
          break;

        case 7:
          _context.prev = 7;
          _context.t0 = _context['catch'](0);

          logger.error(_context.t0.message);

        case 10:
          process.exit(0);

        case 11:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined, [[0, 7]]);
}))();