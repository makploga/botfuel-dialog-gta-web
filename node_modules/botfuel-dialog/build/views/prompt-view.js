'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = require('logtown')('PromptView');
var BotTextMessage = require('../messages/bot-text-message');
var View = require('./view');

/**
 * Prompt dialog's view.
 * @extends View
 */

var PromptView = function (_View) {
  _inherits(PromptView, _View);

  function PromptView() {
    _classCallCheck(this, PromptView);

    return _possibleConstructorReturn(this, (PromptView.__proto__ || Object.getPrototypeOf(PromptView)).apply(this, arguments));
  }

  _createClass(PromptView, [{
    key: 'render',

    /** @inheritDoc */
    value: function render(userMessage, _ref) {
      var matchedEntities = _ref.matchedEntities,
          missingEntities = _ref.missingEntities,
          dialogData = _ref.dialogData;

      logger.debug('render', userMessage, { matchedEntities: matchedEntities, missingEntities: missingEntities, dialogData: dialogData });
      return this.renderEntities(matchedEntities, missingEntities, dialogData);
    }

    /**
     * Confirms the defined entities and asks for the needed ones.
     * @private
     * @param {Object[]} matchedEntities - the defined entities
     * @param {String[]} missingEntities - the needed entities
     * @param {Object} [dialogData] - additional data from dialogWillDisplay hook
     * @returns {Object[]} the bot messages
     */

  }, {
    key: 'renderEntities',
    value: function renderEntities(matchedEntities, missingEntities, dialogData) {
      logger.debug('renderEntities', matchedEntities, missingEntities, dialogData);
      var messages = [];
      if (Object.keys(matchedEntities).length !== 0) {
        messages.push(new BotTextMessage('Entities defined: ' + Object.keys(matchedEntities).filter(function (name) {
          return !!matchedEntities[name];
        }).join(', ')));
      }
      if (Object.keys(missingEntities).length !== 0) {
        messages.push(new BotTextMessage('Entities needed: ' + Object.keys(missingEntities).join(', ')));
        messages.push(new BotTextMessage('Which ' + Object.keys(missingEntities)[0] + '?'));
      }
      return messages;
    }
  }]);

  return PromptView;
}(View);

module.exports = PromptView;