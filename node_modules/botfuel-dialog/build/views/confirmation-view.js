'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = require('logtown')('ConfirmationView');
var BotTextMessage = require('../messages/bot-text-message');
var PromptView = require('./prompt-view');

/**
 * The view for the {@link ConfirmationDialog}.
 * Should be subclassed and provide sensible messages.
 *
 * @extends PromptView
 */

var ConfirmationView = function (_PromptView) {
  _inherits(ConfirmationView, _PromptView);

  /**
   * @constructor
   * @param {Object} $0 - an object with dialogQuestion,
   * dialogConfirmed and dialogDiscarded properties
   */
  function ConfirmationView(_ref) {
    var _ref$dialogQuestion = _ref.dialogQuestion,
        dialogQuestion = _ref$dialogQuestion === undefined ? 'continue dialog?' : _ref$dialogQuestion,
        _ref$dialogConfirmed = _ref.dialogConfirmed,
        dialogConfirmed = _ref$dialogConfirmed === undefined ? 'dialog confirmed.' : _ref$dialogConfirmed,
        _ref$dialogDiscarded = _ref.dialogDiscarded,
        dialogDiscarded = _ref$dialogDiscarded === undefined ? 'dialog discarded.' : _ref$dialogDiscarded;

    _classCallCheck(this, ConfirmationView);

    var _this = _possibleConstructorReturn(this, (ConfirmationView.__proto__ || Object.getPrototypeOf(ConfirmationView)).call(this));

    _this.dialogQuestion = dialogQuestion;
    _this.dialogConfirmed = dialogConfirmed;
    _this.dialogDiscarded = dialogDiscarded;
    return _this;
  }

  /** @inheritDoc */


  _createClass(ConfirmationView, [{
    key: 'renderEntities',
    value: function renderEntities(matchedEntities, missingEntities) {
      logger.debug('renderEntities', matchedEntities, missingEntities);
      if (matchedEntities.answer) {
        if (matchedEntities.answer.values[0].value) {
          return [new BotTextMessage(this.dialogConfirmed)];
        }
        return [new BotTextMessage(this.dialogDiscarded)];
      }
      return [new BotTextMessage(this.dialogQuestion)];
    }
  }]);

  return ConfirmationView;
}(PromptView);

module.exports = ConfirmationView;