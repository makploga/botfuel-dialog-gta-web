'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = require('logtown')('CorpusExtractor');
var Corpus = require('../corpora/corpus');
var Extractor = require('./extractor');

var LETTER_DIGIT_REGEX = /^[0-9a-zA-Z]{1}$/;

/**
 * Corpus based extractor.
 * See {@link Corpus}.
 * @extends Extractor
 */

var CorpusExtractor = function (_Extractor) {
  _inherits(CorpusExtractor, _Extractor);

  function CorpusExtractor() {
    _classCallCheck(this, CorpusExtractor);

    return _possibleConstructorReturn(this, (CorpusExtractor.__proto__ || Object.getPrototypeOf(CorpusExtractor)).apply(this, arguments));
  }

  _createClass(CorpusExtractor, [{
    key: 'compute',

    // eslint-disable-next-line require-jsdoc
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(sentence) {
        var _this2 = this;

        var normalizedSentence, entities, _loop, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, row;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('compute', sentence);
                normalizedSentence = Corpus.normalize(sentence, this.parameters.options);
                entities = [];

                _loop = function _loop(row) {
                  var _loop2 = function _loop2(word) {
                    _this2.findOccurrences(normalizedSentence, word).map(function (index) {
                      return _this2.addEntity(entities, {
                        dim: _this2.parameters.dimension,
                        body: word,
                        values: [_this2.buildValue(row[0])],
                        start: index.start,
                        end: index.end
                      });
                    });
                  };

                  var _iteratorNormalCompletion2 = true;
                  var _didIteratorError2 = false;
                  var _iteratorError2 = undefined;

                  try {
                    for (var _iterator2 = row[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                      var word = _step2.value;

                      _loop2(word);
                    }
                  } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                      }
                    } finally {
                      if (_didIteratorError2) {
                        throw _iteratorError2;
                      }
                    }
                  }
                };

                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context.prev = 7;

                for (_iterator = this.parameters.corpus.matrix[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  row = _step.value;

                  _loop(row);
                }
                _context.next = 15;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context['catch'](7);
                _didIteratorError = true;
                _iteratorError = _context.t0;

              case 15:
                _context.prev = 15;
                _context.prev = 16;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 18:
                _context.prev = 18;

                if (!_didIteratorError) {
                  _context.next = 21;
                  break;
                }

                throw _iteratorError;

              case 21:
                return _context.finish(18);

              case 22:
                return _context.finish(15);

              case 23:
                return _context.abrupt('return', entities);

              case 24:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[7, 11, 15, 23], [16,, 18, 22]]);
      }));

      function compute(_x) {
        return _ref.apply(this, arguments);
      }

      return compute;
    }()

    /**
     * Adds an entity to an array of entities.
     * @private
     * @param {Object[]} entities - the array of entities
     * @param {Object} newEntity - the entity
     * @returns {void}
     */

  }, {
    key: 'addEntity',
    value: function addEntity(entities, newEntity) {
      for (var i = 0; i < entities.length; i++) {
        var entity = entities[i];
        if (newEntity.start <= entity.start && newEntity.end >= entity.end) {
          entities.splice(i, 1);
        }
      }
      entities.push(newEntity);
    }

    /**
     * Finds occurrences of a word in a sentence.
     * @private
     * @param {String} sentence - the sentence
     * @param {String} word - the word
     * @returns {Object[]} an array of objects, each object contains start and end indices
     */

  }, {
    key: 'findOccurrences',
    value: function findOccurrences(sentence, word) {
      logger.debug('extracts', sentence, word);
      var normalizedWord = Corpus.normalize(word, this.parameters.options);
      var results = [];
      for (var start = -1, end = 0;;) {
        start = sentence.indexOf(normalizedWord, end);
        end = start + normalizedWord.length;
        if (start < 0 || start > 0 && LETTER_DIGIT_REGEX.test(sentence[start - 1]) || end < sentence.length && LETTER_DIGIT_REGEX.test(sentence[end])) {
          break;
        }
        results.push({ start: start, end: end });
      }
      return results;
    }

    /**
     * Builds the object value from a string.
     * @param {String} value - the string
     * @returns {Object} the object value
     */

  }, {
    key: 'buildValue',
    value: function buildValue(value) {
      return { value: value, type: 'string' };
    }
  }]);

  return CorpusExtractor;
}(Extractor);

module.exports = CorpusExtractor;