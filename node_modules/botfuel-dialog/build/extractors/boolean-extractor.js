'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var FileCorpus = require('../corpora/file-corpus');
var CorpusExtractor = require('./corpus-extractor');

/**
 * Extracts boolean entities.
 * @extends CorpusExtractor
 */

var BooleanExtractor = function (_CorpusExtractor) {
  _inherits(BooleanExtractor, _CorpusExtractor);

  /**
   * @constructor
   * @param {Object} parameters - the extractor parameters
   */
  function BooleanExtractor(parameters) {
    _classCallCheck(this, BooleanExtractor);

    parameters.dimension = 'system:boolean';
    parameters.corpus = new FileCorpus(__dirname + '/../corpora/boolean.' + parameters.locale + '.txt');
    return _possibleConstructorReturn(this, (BooleanExtractor.__proto__ || Object.getPrototypeOf(BooleanExtractor)).call(this, parameters));
  }

  // eslint-disable-next-line require-jsdoc


  _createClass(BooleanExtractor, [{
    key: 'buildValue',
    value: function buildValue(value) {
      return { value: value === '1', type: 'boolean' };
    }
  }]);

  return BooleanExtractor;
}(CorpusExtractor);

module.exports = BooleanExtractor;