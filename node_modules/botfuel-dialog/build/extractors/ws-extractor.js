'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var _require = require('lodash'),
    clone = _require.clone,
    extend = _require.extend;

var nlp = require('botfuel-nlp-sdk');
var logger = require('logtown')('WsExtractor');
var AuthenticationError = require('../errors/authentication-error');
var MissingCredentialsError = require('../errors/missing-credentials-error');
var Extractor = require('./extractor');

/**
 * Entity extraction web service based extractor.
 */

var WsExtractor = function (_Extractor) {
  _inherits(WsExtractor, _Extractor);

  /**
   * @constructor
   * @param {Object} parameters - the extractor parameters
   */
  function WsExtractor(parameters) {
    _classCallCheck(this, WsExtractor);

    var _this = _possibleConstructorReturn(this, (WsExtractor.__proto__ || Object.getPrototypeOf(WsExtractor)).call(this, parameters));

    if (!process.env.BOTFUEL_APP_ID || !process.env.BOTFUEL_APP_KEY) {
      throw new MissingCredentialsError('BOTFUEL_APP_ID and BOTFUEL_APP_KEY are required for using the entity extraction service.');
    }
    _this.client = new nlp.EntityExtraction({
      appId: process.env.BOTFUEL_APP_ID,
      appKey: process.env.BOTFUEL_APP_KEY
    });
    return _this;
  }

  /** @inheritDoc */


  _createClass(WsExtractor, [{
    key: 'compute',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(sentence) {
        var query, entities;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;

                logger.debug('compute', sentence);
                query = clone(this.parameters);

                extend(query, { sentence: sentence });
                _context.next = 6;
                return this.client.compute(query);

              case 6:
                entities = _context.sent;
                return _context.abrupt('return', entities.map(function (entity) {
                  return _extends({}, entity, {
                    start: entity.start,
                    end: entity.end
                  });
                }));

              case 10:
                _context.prev = 10;
                _context.t0 = _context['catch'](0);

                logger.error('Could not extract the entities!');

                if (!(_context.t0.statusCode === 403)) {
                  _context.next = 15;
                  break;
                }

                throw new AuthenticationError();

              case 15:
                throw _context.t0;

              case 16:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 10]]);
      }));

      function compute(_x) {
        return _ref.apply(this, arguments);
      }

      return compute;
    }()
  }]);

  return WsExtractor;
}(Extractor);

module.exports = WsExtractor;