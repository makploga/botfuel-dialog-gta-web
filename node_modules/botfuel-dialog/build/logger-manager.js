'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var fs = require('fs-extra');
var Logger = require('logtown');
var LoggerError = require('./errors/logger-error');

/**
 * Configure the logger facade
 */

var LoggerManager = function () {
  function LoggerManager() {
    _classCallCheck(this, LoggerManager);
  }

  _createClass(LoggerManager, null, [{
    key: 'configure',

    /**
     * Configures the logger wrapper and configuration
     * @param {Object} config - the bot configuration
     * @returns {void}
     */
    value: function configure(config) {
      var _filter = [config.path + '/src/loggers/' + config.logger + '.js', __dirname + '/loggers/' + config.logger + '.js'].filter(function (path) {
        return fs.pathExistsSync(path);
      }),
          _filter2 = _slicedToArray(_filter, 1),
          loggerPath = _filter2[0];

      if (!loggerPath) {
        throw new LoggerError({ message: 'Logger ' + config.logger + ' not found!' });
      }

      var loggerConfig = require(loggerPath);

      if (loggerConfig.wrapper) {
        // clean wrappers
        Logger.clean();
        Logger.addWrapper(loggerConfig.wrapper);
      }

      if (loggerConfig.config) {
        Logger.configure(loggerConfig.config);
      }
    }
  }]);

  return LoggerManager;
}();

module.exports = LoggerManager;