'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var fs = require('fs');
var logger = require('logtown')('FileCorpus');
var Corpus = require('./corpus');

/**
 * Class for generating a corpus from a file.
 */

var FileCorpus = function (_Corpus) {
  _inherits(FileCorpus, _Corpus);

  /**
   * @constructor
   * @param {String} path - the file path
   * @param {String} [separator=','] - the optional row separator
   */
  function FileCorpus(path) {
    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';

    _classCallCheck(this, FileCorpus);

    logger.debug('constructor', path, separator);
    return _possibleConstructorReturn(this, (FileCorpus.__proto__ || Object.getPrototypeOf(FileCorpus)).call(this, fs.readFileSync(path, 'utf8') // TODO: async?
    .toString().split('\n').filter(function (row) {
      return row.length > 0;
    }).map(function (row) {
      return row.split(separator);
    })));
  }

  return FileCorpus;
}(Corpus);

module.exports = FileCorpus;