'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = require('logtown')('Brain');
var MissingImplementationError = require('../errors/missing-implementation-error');

/**
 * A brain is a storage for user and conversation data.
 * Some of the brain methods use a scope which is either 'user' or 'last conversation'.
 */

var Brain = function () {
  /**
   * @constructor
   * @param {Object} config - the config
   */
  function Brain() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { conversationDuration: 86400000 };

    _classCallCheck(this, Brain);

    this.conversationDuration = config.conversationDuration;
  }

  /**
   * Initializes the brain.
   * @async
   * @private
   * @returns {Promise.<void>}
   */


  _createClass(Brain, [{
    key: 'init',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('init');

              case 1:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _ref.apply(this, arguments);
      }

      return init;
    }()

    /**
     * Empties the brain.
     * @async
     * @abstract
     * @returns {Promise.<void>}
     */

  }, {
    key: 'clean',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function clean() {
        return _ref2.apply(this, arguments);
      }

      return clean;
    }()

    /**
     * Gets the init value for creating a new user.
     * @param {String} userId - the user id
     * @returns {Object}
     */

  }, {
    key: 'getUserInitValue',
    value: function getUserInitValue(userId) {
      return {
        userId: userId,
        conversations: [this.getConversationInitValue()],
        createdAt: Date.now()
      };
    }

    /**
     * Gets the init value for creating a new conversation.
     * @returns {Object}
     */

  }, {
    key: 'getConversationInitValue',
    value: function getConversationInitValue() {
      return {
        _dialogs: { stack: [], previous: [] },
        createdAt: Date.now()
      };
    }

    /**
     * Inits a user if necessary (if he does not exist).
     * @async
     * @param {String} userId - the user id
     * @returns {Promise.<void>}
     */

  }, {
    key: 'initUserIfNecessary',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(userId) {
        var userExists;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                logger.debug('initUserIfNecessary', userId);
                _context3.next = 3;
                return this.hasUser(userId);

              case 3:
                userExists = _context3.sent;

                if (userExists) {
                  _context3.next = 7;
                  break;
                }

                _context3.next = 7;
                return this.addUser(userId);

              case 7:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function initUserIfNecessary(_x2) {
        return _ref3.apply(this, arguments);
      }

      return initUserIfNecessary;
    }()

    /**
     * Checks if there is a user for a given id.
     * @async
     * @abstract
     * @param {String} userId - the user id
     * @returns {boolean} true if the user exists, false otherwise
     */

  }, {
    key: 'hasUser',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function hasUser() {
        return _ref4.apply(this, arguments);
      }

      return hasUser;
    }()

    /**
     * Adds a user.
     * @async
     * @param {String} userId - the  user id
     * @returns {Promise.<Object>} the new user
     */

  }, {
    key: 'addUser',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function addUser() {
        return _ref5.apply(this, arguments);
      }

      return addUser;
    }()

    /**
     * Gets a user.
     * @async
     * @param {String} userId - the user id
     * @returns {Promise.<Object>} the user
     */

  }, {
    key: 'getUser',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getUser() {
        return _ref6.apply(this, arguments);
      }

      return getUser;
    }()

    /**
     * Adds a conversation to a user.
     * @async
     * @param {String} userId - user id
     * @returns {Promise.<Object>} the last conversation added
     */

  }, {
    key: 'addConversation',
    value: function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function addConversation() {
        return _ref7.apply(this, arguments);
      }

      return addConversation;
    }()

    /**
     * Gets the last conversation of the user.
     * @async
     * @param {String} userId - the user id
     * @returns {Promise.<Object>} the last conversation of the user
     */

  }, {
    key: 'getLastConversation',
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getLastConversation() {
        return _ref8.apply(this, arguments);
      }

      return getLastConversation;
    }()

    /**
     * Sets a value for a key within the scope of the user.
     * @async
     * @abstract
     * @param {String} userId - the user id
     * @param {String} key - the key
     * @param {*} value - the value
     * @returns {Promise.<Object>} the updated user
     */

  }, {
    key: 'userSet',
    value: function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function userSet() {
        return _ref9.apply(this, arguments);
      }

      return userSet;
    }()

    /**
     * Gets a value for a key within the scope of the user.
     * @async
     * @param {String} userId - the user id
     * @param {String} key - the key
     * @returns {Promise.<*>} the value
     */

  }, {
    key: 'userGet',
    value: function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(userId, key) {
        var user;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                logger.debug('userGet', userId, key);
                _context10.next = 3;
                return this.getUser(userId);

              case 3:
                user = _context10.sent;
                return _context10.abrupt('return', user[key]);

              case 5:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function userGet(_x3, _x4) {
        return _ref10.apply(this, arguments);
      }

      return userGet;
    }()

    /**
     * Sets a value for a key within the scope of the last conversation of a user.
     * @async
     * @param {String} userId - the user id
     * @param {String} key - the key
     * @param {*} value - the  value
     * @returns {Promise.<Object>} the updated conversation
     */

  }, {
    key: 'conversationSet',
    value: function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function conversationSet() {
        return _ref11.apply(this, arguments);
      }

      return conversationSet;
    }()

    /**
     * Gets the value for a given key within the scope of the last conversation of a user.
     * @async
     * @param {String} userId - user id
     * @param {String} key - last conversation key
     * @returns {Promise}
     */

  }, {
    key: 'conversationGet',
    value: function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(userId, key) {
        var conversation;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                logger.debug('conversationGet', userId, key);
                _context12.next = 3;
                return this.getLastConversation(userId);

              case 3:
                conversation = _context12.sent;
                return _context12.abrupt('return', conversation[key]);

              case 5:
              case 'end':
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function conversationGet(_x5, _x6) {
        return _ref12.apply(this, arguments);
      }

      return conversationGet;
    }()

    /**
     * Validates the last conversation of an user
     * @param {Object} conversation - the conversation
     * @returns {Boolean}
     */

  }, {
    key: 'isConversationValid',
    value: function isConversationValid(conversation) {
      return conversation !== undefined && Date.now() - conversation.createdAt < this.conversationDuration;
    }

    /**
     * Get dialogs data from the last conversation
     * @param {String} userId - user id
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'getDialogs',
    value: function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(userId) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                return _context13.abrupt('return', this.conversationGet(userId, '_dialogs'));

              case 1:
              case 'end':
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function getDialogs(_x7) {
        return _ref13.apply(this, arguments);
      }

      return getDialogs;
    }()

    /**
     * Set dialogs data in the last conversation
     * @param {String} userId - user id
     * @param {Object} dialogs - dialogs data of the last conversation
     * @returns {Promise<void>}
     */

  }, {
    key: 'setDialogs',
    value: function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(userId, dialogs) {
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                if (!dialogs.isNewConversation) {
                  _context14.next = 4;
                  break;
                }

                _context14.next = 3;
                return this.addConversation(userId);

              case 3:
                delete dialogs.isNewConversation;

              case 4:
                _context14.next = 6;
                return this.conversationSet(userId, '_dialogs', dialogs);

              case 6:
              case 'end':
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function setDialogs(_x8, _x9) {
        return _ref14.apply(this, arguments);
      }

      return setDialogs;
    }()

    /**
     * Gets a value for a key within the global scope.
     * @async
     * @abstract
     * @param {String} key - the key
     * @returns {Promise.<*>} the value
     */

  }, {
    key: 'getValue',
    value: function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function getValue() {
        return _ref15.apply(this, arguments);
      }

      return getValue;
    }()

    /**
     * Sets a value for a key within the global scope.
     * @async
     * @abstract
     * @param {String} key - the key
     * @param {*} value - the value
     * @returns {Promise.<*>} the new value
     */

  }, {
    key: 'setValue',
    value: function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function setValue() {
        return _ref16.apply(this, arguments);
      }

      return setValue;
    }()
  }]);

  return Brain;
}();

module.exports = Brain;