'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = require('logtown')('MemoryBrain');
var last = require('lodash/last');
var Brain = require('./brain');

/**
 * Brain with in-memory storage.
 * @extends Brain
 */

var MemoryBrain = function (_Brain) {
  _inherits(MemoryBrain, _Brain);

  /** @inheritdoc */
  function MemoryBrain(config) {
    _classCallCheck(this, MemoryBrain);

    logger.debug('constructor');

    var _this = _possibleConstructorReturn(this, (MemoryBrain.__proto__ || Object.getPrototypeOf(MemoryBrain)).call(this, config));

    _this.users = {};
    _this.bot = {};
    return _this;
  }

  /** @inheritdoc */


  _createClass(MemoryBrain, [{
    key: 'clean',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('clean');
                this.users = {};
                this.bot = {};

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function clean() {
        return _ref.apply(this, arguments);
      }

      return clean;
    }()

    /** @inheritdoc */

  }, {
    key: 'hasUser',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(userId) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                logger.debug('hasUser', userId);
                return _context2.abrupt('return', this.users[userId] !== undefined);

              case 2:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function hasUser(_x) {
        return _ref2.apply(this, arguments);
      }

      return hasUser;
    }()

    /** @inheritdoc */

  }, {
    key: 'addUser',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(userId) {
        var newUser;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                logger.debug('addUser', userId);
                _context3.next = 3;
                return this.hasUser(userId);

              case 3:
                if (!_context3.sent) {
                  _context3.next = 5;
                  break;
                }

                throw new Error('An user with this id for this bot already exists');

              case 5:
                newUser = this.getUserInitValue(userId);

                this.users[userId] = newUser;
                return _context3.abrupt('return', newUser);

              case 8:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function addUser(_x2) {
        return _ref3.apply(this, arguments);
      }

      return addUser;
    }()

    /** @inheritdoc */

  }, {
    key: 'getUser',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(userId) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                logger.debug('getUser', userId);
                _context4.next = 3;
                return this.hasUser(userId);

              case 3:
                if (_context4.sent) {
                  _context4.next = 5;
                  break;
                }

                throw new Error('User does not exist');

              case 5:
                return _context4.abrupt('return', this.users[userId]);

              case 6:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getUser(_x3) {
        return _ref4.apply(this, arguments);
      }

      return getUser;
    }()

    /** @inheritdoc */

  }, {
    key: 'userSet',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(userId, key, value) {
        var user;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                logger.debug('userSet', userId, key, value);
                _context5.next = 3;
                return this.getUser(userId);

              case 3:
                user = _context5.sent;

                user[key] = value;
                return _context5.abrupt('return', user);

              case 6:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function userSet(_x4, _x5, _x6) {
        return _ref5.apply(this, arguments);
      }

      return userSet;
    }()

    /** @inheritdoc */

  }, {
    key: 'getLastConversation',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(userId) {
        var conversation;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                logger.debug('getLastConversation', userId);
                conversation = last(this.users[userId].conversations);
                return _context6.abrupt('return', this.isConversationValid(conversation) ? conversation : this.addConversation(userId));

              case 3:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getLastConversation(_x7) {
        return _ref6.apply(this, arguments);
      }

      return getLastConversation;
    }()

    /** @inheritdoc */

  }, {
    key: 'addConversation',
    value: function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(userId) {
        var conversation;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                logger.debug('addConversation', userId);
                conversation = this.getConversationInitValue();

                this.users[userId].conversations.push(conversation);
                return _context7.abrupt('return', conversation);

              case 4:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function addConversation(_x8) {
        return _ref7.apply(this, arguments);
      }

      return addConversation;
    }()

    /** @inheritdoc */

  }, {
    key: 'conversationSet',
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(userId, key, value) {
        var conversation;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                logger.debug('conversationSet', userId, key, value);
                _context8.next = 3;
                return this.getLastConversation(userId);

              case 3:
                conversation = _context8.sent;

                logger.debug('conversationSet', { conversation: conversation });
                conversation[key] = value;
                return _context8.abrupt('return', conversation);

              case 7:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function conversationSet(_x9, _x10, _x11) {
        return _ref8.apply(this, arguments);
      }

      return conversationSet;
    }()

    /** @inheritdoc */

  }, {
    key: 'getValue',
    value: function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(key) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                return _context9.abrupt('return', this.bot[key]);

              case 1:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getValue(_x12) {
        return _ref9.apply(this, arguments);
      }

      return getValue;
    }()

    /** @inheritdoc */

  }, {
    key: 'setValue',
    value: function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(key, value) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                this.bot[key] = value;
                return _context10.abrupt('return', value);

              case 2:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function setValue(_x13, _x14) {
        return _ref10.apply(this, arguments);
      }

      return setValue;
    }()
  }]);

  return MemoryBrain;
}(Brain);

module.exports = MemoryBrain;