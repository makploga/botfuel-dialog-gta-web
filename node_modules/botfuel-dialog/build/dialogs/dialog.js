'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = require('logtown')('Dialog');
var kebabCase = require('lodash/kebabCase');
var ViewResolver = require('../view-resolver');
var MissingImplementationError = require('../errors/missing-implementation-error');
var DialogError = require('../errors/dialog-error');

/**
 * A dialog is responsible for calling its associated view with the right parameters.
 *
 * The dialog and its associated view share the same name.
 * The dialog optionally accesses the brain and
 * then calls the view with the right parameters for the rendering.
 * At the end of the execution, an object is returned which contains
 * either the new status of the dialog or or a new dialog to execute.
 */

var Dialog = function () {
  _createClass(Dialog, [{
    key: 'ACTION_CANCEL',


    /**
     * Indicates that this dialog is cancelling the previous one.
     */
    get: function get() {
      return Dialog.ACTION_CANCEL;
    }

    /**
     * Indicates that this dialog is completed.
     */

  }, {
    key: 'ACTION_COMPLETE',
    get: function get() {
      return Dialog.ACTION_COMPLETE;
    }

    /**
     * Indicates that this dialog should wait.
     */

  }, {
    key: 'ACTION_WAIT',
    get: function get() {
      return Dialog.ACTION_WAIT;
    }

    /**
     * Indicates that this dialog is calling the next one.
     */

  }, {
    key: 'ACTION_NEXT',
    get: function get() {
      return Dialog.ACTION_NEXT;
    }

    /**
     * Reset dialogs.
     */

  }, {
    key: 'ACTION_NEW_CONVERSATION',
    get: function get() {
      return Dialog.ACTION_NEW_CONVERSATION;
    }

    /**
     * @constructor
     * @param {Object} config - the bot config
     * @param {class} brain - the bot brain
     * @param {Object} characteristics - the characteristics of the dialog
     * @param {Object} [parameters={}] - the optional dialog parameters
     */

  }]);

  function Dialog(config, brain) {
    var characteristics = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { reentrant: false };
    var parameters = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _classCallCheck(this, Dialog);

    logger.debug('constructor', parameters);
    this.brain = brain;
    this.characteristics = characteristics;
    this.parameters = parameters;
    this.viewResolver = new ViewResolver(config);
    this.name = this.getName();
  }

  /**
   * Gets dialog name
   * @returns {String} the dialog name
   */


  _createClass(Dialog, [{
    key: 'getName',
    value: function getName() {
      return kebabCase(this.constructor.name).replace(/(dialog|-dialog)/g, ''); // TODO: is this correct?
    }

    /**
     * Displays messages by resolving the view associated to the dialog.
     * @async
     * @param {Adapter} adapter - the adapter
     * @param {Object} userMessage - the user message
     * used by the view to customize its behaviour
     * @param {Object} [data] - data used at display time
     * @returns {Promise.<void>}
     */

  }, {
    key: 'display',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(adapter, userMessage, data) {
        var botMessages;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('display', userMessage, data);
                botMessages = this.viewResolver.resolve(this.name).renderAsJson(userMessage, data);
                return _context.abrupt('return', adapter.send(botMessages));

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function display(_x3, _x4, _x5) {
        return _ref.apply(this, arguments);
      }

      return display;
    }()

    /**
     * Executes the dialog.
     * @abstract
     * @async
     * @param {Adapter} adapter - the adapter
     * @param {Object} userMessage - the user message
     * @param {String[]} messageEntities - the message entities
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'execute',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function execute() {
        return _ref2.apply(this, arguments);
      }

      return execute;
    }()

    /**
     * Builds an object that sets the current dialog as completed
     * and provides the name of the next dialog.
     * @param {String} dialogName - the name of the next dialog
     * @param {Object[]} dialogEntities - the entities for the next dialog
     * @returns {Object} contains
     *   - a newDialog object thas has a name
     *   - an action set to ACTION_NEXT
     */

  }, {
    key: 'triggerNext',
    value: function triggerNext(dialogName) {
      var dialogEntities = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (!dialogName) {
        throw new DialogError({
          message: 'You must provide a dialogName as a parameter to the nextDialog method.'
        });
      }

      return {
        newDialog: {
          name: dialogName,
          entities: dialogEntities
        },
        name: this.ACTION_NEXT
      };
    }

    /**
     * Builds an object that sets the previous dialog as canceled
     * and optionally provides name of the next dialog.
     * @param {String} [dialogName] - the name of the next dialog (optional)
     * @returns {Object} contains
     *   - a newDialog object thas has a name (optional)
     *   - an action set to ACTION_CANCEL
     */

  }, {
    key: 'cancelPrevious',
    value: function cancelPrevious(dialogName) {
      return _extends({
        name: this.ACTION_CANCEL
      }, dialogName && {
        newDialog: {
          name: dialogName
        }
      });
    }

    /**
     * Builds an action's object that starts a new conversation
     * and optionally provides name of the next dialog to start with.
     * @param {String} [dialogName] - the name of the next dialog (optional)
     * @param {Object[]} [dialogEntities] - the entities for the next dialog
     * @returns {Object} contains
     *   - an action set to ACTION_NEW_CONVERSATION
     *   - a newDialog object thas has a name (optional)
     */

  }, {
    key: 'startNewConversation',
    value: function startNewConversation(dialogName) {
      var dialogEntities = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      return _extends({
        name: this.ACTION_NEW_CONVERSATION
      }, dialogName && {
        newDialog: {
          name: dialogName,
          entities: dialogEntities
        }
      });
    }

    /**
     * Builds an object that sets current dialog as completed.
     * @returns {Object} contains
     *   - an action set to ACTION_COMPLETE
     */

  }, {
    key: 'complete',
    value: function complete() {
      return {
        name: this.ACTION_COMPLETE
      };
    }

    /**
     * Builds an object that indicates that current dialog should wait.
     * @returns {Object} contains
     *   - an action set to ACTION_WAIT
     */

  }, {
    key: 'wait',
    value: function wait() {
      return {
        name: this.ACTION_WAIT
      };
    }

    /**
     * Hook to be overridden before dialog displays.
     * Returns null by default.
     * @async
     * @param {Object} [userMessage] - the user message
     * @param {Object} [dialogData] - the dialog data
     * @returns {Promise.<*>} the data extended to the display method
     */

  }, {
    key: 'dialogWillDisplay',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(userMessage, dialogData) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                logger.debug('dialogWillDisplay', userMessage, dialogData);
                return _context3.abrupt('return', null);

              case 2:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function dialogWillDisplay(_x8, _x9) {
        return _ref3.apply(this, arguments);
      }

      return dialogWillDisplay;
    }()

    /**
     * Hook to be overridden before dialog completes.
     * Does nothing by default.
     * @async
     * @param {Object} [userMessage] - the user message
     * @param {Object} [dialogData] - the dialog data
     * @returns {Promise.<*>}
     */

  }, {
    key: 'dialogWillComplete',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(userMessage, dialogData) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                logger.debug('dialogWillComplete', userMessage, dialogData);

              case 1:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function dialogWillComplete(_x10, _x11) {
        return _ref4.apply(this, arguments);
      }

      return dialogWillComplete;
    }()
  }]);

  return Dialog;
}();

Dialog.ACTION_CANCEL = 'cancel';
Dialog.ACTION_COMPLETE = 'complete';
Dialog.ACTION_WAIT = 'wait';
Dialog.ACTION_NEXT = 'next';
Dialog.ACTION_NEW_CONVERSATION = 'new_conversation';


module.exports = Dialog;