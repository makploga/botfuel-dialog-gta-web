'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = require('logtown')('DialogManager');
var Resolver = require('./resolver');
var Dialog = require('./dialogs/dialog');
var DialogError = require('./errors/dialog-error');

/**
 * The dialog manager turns NLU output into a dialog stack.
 *
 * The dialog manager has access to:
 * - the bot {@link Brain}.
 */

var DialogManager = function (_Resolver) {
  _inherits(DialogManager, _Resolver);

  /**
   * @constructor
   * @param {Object} brain - the bot brain
   * @param {Object} config - the bot config
   */
  function DialogManager(brain, config) {
    _classCallCheck(this, DialogManager);

    var _this = _possibleConstructorReturn(this, (DialogManager.__proto__ || Object.getPrototypeOf(DialogManager)).call(this, config, 'dialog'));

    _this.brain = brain;
    return _this;
  }

  /** @inheritdoc */


  _createClass(DialogManager, [{
    key: 'getPaths',
    value: function getPaths(name) {
      logger.debug('getPaths', name);
      return [this.path + '/' + name + '-' + this.kind + '.' + this.config.adapter + '.js', this.path + '/' + name + '-' + this.kind + '.js', this.localPath + '/' + name + '-' + this.kind + '.' + this.config.adapter + '.js', this.localPath + '/' + name + '-' + this.kind + '.js'];
    }

    /** @inheritdoc */

  }, {
    key: 'resolutionSucceeded',
    value: function resolutionSucceeded(Resolved) {
      return new Resolved(this.config, this.brain, Resolved.params);
    }

    /**
     * Sorts intents
     * @param {Object[]} intents - the intent names
     * @returns {Object[]} the sorted intents
     */

  }, {
    key: 'sortIntents',
    value: function sortIntents(intents) {
      var _this2 = this;

      logger.debug('sortIntents', intents);
      return intents.sort(function (intent1, intent2) {
        var reentrant1 = _this2.resolve(intent1).characteristics.reentrant;
        var reentrant2 = _this2.resolve(intent2).characteristics.reentrant;
        if (reentrant1 && !reentrant2) {
          return 1;
        }
        if (!reentrant1 && reentrant2) {
          return -1;
        }
        return 0;
      });
    }

    /**
     * Returns the last dialog to execute if no other dialog is found.
     * @param {Object[]} previousDialogs - the previous dialogs
     * @returns {String} a dialog name
     */

  }, {
    key: 'getLastDialog',
    value: function getLastDialog(previousDialogs) {
      for (var i = previousDialogs.length - 1; i >= 0; i--) {
        var dialog = previousDialogs[i];
        var dialogInstance = this.resolve(dialog.name);
        if (dialogInstance.characteristics.reentrant) {
          return dialog;
        }
      }
      return null;
    }

    /**
     * Returns the dialogs data (stack and previous dialogs).
     * @param {String} userId - the user id
     * @returns {Promise.<Object[]>} the data
     */

  }, {
    key: 'getDialogs',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(userId) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('getDialogs', userId);
                return _context.abrupt('return', this.brain.getDialogs(userId));

              case 2:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getDialogs(_x) {
        return _ref.apply(this, arguments);
      }

      return getDialogs;
    }()

    /**
     * Sets the dialogs data (stack and previous dialogs).
     * @param {String} userId - the user id
     * @param {Object} dialogs - the dialogs data
     * @returns {void}
     */

  }, {
    key: 'setDialogs',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(userId, dialogs) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                logger.debug('setDialogs', userId, dialogs);
                _context2.next = 3;
                return this.brain.setDialogs(userId, dialogs);

              case 3:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function setDialogs(_x2, _x3) {
        return _ref2.apply(this, arguments);
      }

      return setDialogs;
    }()

    /**
     * Updates the dialogs.
     * @param {String} userId - the user id
     * @param {Object} dialogs - the dialogs data
     * @param {Object[]} intents - the intents
     * @param {Object[]} entities - the entities
     * @returns {void}
     */

  }, {
    key: 'updateWithIntents',
    value: function updateWithIntents(userId, dialogs, intents, entities) {
      logger.debug('updateWithIntents', userId, dialogs, intents, entities);
      intents = this.sortIntents(intents);
      logger.debug('updateWithIntents: intents', intents);
      var nb = 0;
      var newDialogs = [];
      for (var i = 0; i < intents.length; i++) {
        var name = intents[i];
        var characteristics = this.resolve(name).characteristics;
        if (characteristics.reentrant) {
          nb++;
        }
        newDialogs.push({
          name: name,
          entities: entities,
          blocked: nb > 1
        });
      }
      this.updateWithDialogs(dialogs, newDialogs);
      if (dialogs.stack.length === 0) {
        // no intent detected
        var lastDialog = this.getLastDialog(dialogs.previous) || {
          name: 'default',
          characteristics: {
            reentrant: false
          }
        };
        dialogs.stack.push(_extends({}, lastDialog, {
          entities: entities || []
        }));
      }
      if (entities) {
        dialogs.stack[dialogs.stack.length - 1].entities = entities;
      }
    }

    /**
     * Updates the dialogs.
     * @param {Object} dialogs - the dialogs data
     * @param {Object[]} newDialogs - new dialogs to be added to the dialog stack
     * @returns {void}
     */

  }, {
    key: 'updateWithDialogs',
    value: function updateWithDialogs(dialogs, newDialogs) {
      for (var i = newDialogs.length - 1; i >= 0; i--) {
        var newDialog = newDialogs[i];
        var lastIndex = dialogs.stack.length - 1;
        var lastDialog = lastIndex >= 0 ? dialogs.stack[lastIndex] : null;
        if (lastDialog && lastDialog.name === newDialog.name) {
          lastDialog.entities = newDialog.entities;
        } else {
          dialogs.stack.push(newDialog);
        }
      }
    }

    /**
     * Applies an action to the dialogs object.
     * @async
     * @param {Object} dialogs - the dialogs object to be updated
     * @param {String} action - an action that indicates
     * how should the stack and previous dialogs be updated
     * @returns {Object} The new dialogs object with its stack and previous arrays updated
     */

  }, {
    key: 'applyAction',
    value: function applyAction(dialogs, _ref3) {
      var name = _ref3.name,
          newDialog = _ref3.newDialog;

      logger.debug('applyAction', dialogs, { name: name, newDialog: newDialog });
      var currentDialog = dialogs.stack[dialogs.stack.length - 1];
      var date = Date.now();

      switch (name) {
        case Dialog.ACTION_CANCEL:
          dialogs = _extends({}, dialogs, {
            stack: dialogs.stack.slice(0, -2),
            previous: [].concat(_toConsumableArray(dialogs.previous), [_extends({}, currentDialog, { date: date })])
          });
          if (newDialog) {
            this.updateWithDialogs(dialogs, [newDialog]);
          }
          return dialogs;

        case Dialog.ACTION_COMPLETE:
          return _extends({}, dialogs, {
            stack: dialogs.stack.slice(0, -1),
            previous: [].concat(_toConsumableArray(dialogs.previous), [_extends({}, currentDialog, { date: date })])
          });

        case Dialog.ACTION_NEXT:
          dialogs = _extends({}, dialogs, {
            stack: dialogs.stack.slice(0, -1),
            previous: [].concat(_toConsumableArray(dialogs.previous), [_extends({}, currentDialog, { date: date })])
          });
          this.updateWithDialogs(dialogs, [newDialog]);
          return dialogs;

        case Dialog.ACTION_NEW_CONVERSATION:
          dialogs = _extends({}, dialogs, {
            stack: [],
            previous: [],
            isNewConversation: true
          });
          if (newDialog) {
            dialogs.stack.push(newDialog);
          }
          return dialogs;

        default:
          throw new DialogError({
            name: currentDialog,
            message: 'Unknown action \'' + name + '\' in \'' + currentDialog.name + '\''
          });
      }
    }

    /**
     * Executes the dialogs.
     * @async
     * @param {Adapter} adapter - the adapter
     * @param {Object} userMessage - the user message
     * @param {Object[]} dialogs - the dialogs data
     * @returns {Promise.<Object[]>}
     */

  }, {
    key: 'execute',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(adapter, userMessage, dialogs) {
        var dialog, confirmationDialogName, action;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                logger.debug('execute', userMessage, dialogs);

                if (!(dialogs.stack.length === 0)) {
                  _context3.next = 3;
                  break;
                }

                return _context3.abrupt('return', dialogs);

              case 3:
                dialog = dialogs.stack[dialogs.stack.length - 1];

                if (!dialog.blocked) {
                  _context3.next = 10;
                  break;
                }

                dialog.blocked = false;
                confirmationDialogName = this.resolve(dialog.name + '-confirmation') ? dialog.name + '-confirmation' : 'confirmation';

                dialogs.stack.push({
                  name: confirmationDialogName,
                  characteristics: {
                    reentrant: false
                  },
                  entities: []
                });
                _context3.next = 21;
                break;

              case 10:
                _context3.next = 12;
                return this.resolve(dialog.name).execute(adapter, userMessage, dialog.entities);

              case 12:
                action = _context3.sent;

                logger.debug('execute: action', action);

                if (!(action.name !== Dialog.ACTION_WAIT)) {
                  _context3.next = 20;
                  break;
                }

                _context3.next = 17;
                return this.applyAction(dialogs, action);

              case 17:
                dialogs = _context3.sent;
                _context3.next = 21;
                break;

              case 20:
                return _context3.abrupt('return', dialogs);

              case 21:
                return _context3.abrupt('return', this.execute(adapter, userMessage, dialogs));

              case 22:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function execute(_x4, _x5, _x6) {
        return _ref4.apply(this, arguments);
      }

      return execute;
    }()

    /**
     * Populates and executes the stack.
     * @param {Adapter} adapter - the adapter
     * @param {Object} userMessage - the user message
     * @param {String[]} intents - the intents
     * @param {Object[]} entities - the transient entities
     * @returns {void}
     */

  }, {
    key: 'executeIntents',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(adapter, userMessage, intents, entities) {
        var userId, dialogs;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                logger.debug('execute', userMessage, intents, entities);
                userId = userMessage.user;
                _context4.next = 4;
                return this.getDialogs(userId);

              case 4:
                dialogs = _context4.sent;

                this.updateWithIntents(userId, dialogs, intents, entities);
                _context4.t0 = this;
                _context4.t1 = userId;
                _context4.next = 10;
                return this.execute(adapter, userMessage, dialogs);

              case 10:
                _context4.t2 = _context4.sent;
                _context4.next = 13;
                return _context4.t0.setDialogs.call(_context4.t0, _context4.t1, _context4.t2);

              case 13:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function executeIntents(_x7, _x8, _x9, _x10) {
        return _ref5.apply(this, arguments);
      }

      return executeIntents;
    }()

    /**
     * Populates and executes the stack.
     * @param {Adapter} adapter - the adapter
     * @param {Object} userMessage - the user message
     * @param {Object[]} newDialogs - the new dialogs
     * @returns {void}
     */

  }, {
    key: 'executeDialogs',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(adapter, userMessage, newDialogs) {
        var userId, dialogs;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                logger.debug('executeWithDialogs', userMessage, newDialogs);
                userId = userMessage.user;
                _context5.next = 4;
                return this.getDialogs(userId);

              case 4:
                dialogs = _context5.sent;

                this.updateWithDialogs(dialogs, newDialogs);
                _context5.t0 = this;
                _context5.t1 = userId;
                _context5.next = 10;
                return this.execute(adapter, userMessage, dialogs);

              case 10:
                _context5.t2 = _context5.sent;
                _context5.next = 13;
                return _context5.t0.setDialogs.call(_context5.t0, _context5.t1, _context5.t2);

              case 13:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function executeDialogs(_x11, _x12, _x13) {
        return _ref6.apply(this, arguments);
      }

      return executeDialogs;
    }()
  }]);

  return DialogManager;
}(Resolver);

module.exports = DialogManager;