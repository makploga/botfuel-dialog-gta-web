'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _requestPromiseNative = require('request-promise-native');

var _requestPromiseNative2 = _interopRequireDefault(_requestPromiseNative);

var _urlJoin = require('url-join');

var _urlJoin2 = _interopRequireDefault(_urlJoin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ApiResource = function () {
  function ApiResource() {
    _classCallCheck(this, ApiResource);
  }

  _createClass(ApiResource, [{
    key: 'curriedRp',


    // Pre set headers param to avoid setting headers in each rp call
    value: function curriedRp(route, params) {
      return (0, _requestPromiseNative2.default)(_extends({
        headers: this.headers,
        uri: (0, _urlJoin2.default)(this.API, route),
        json: true
      }, params, params.qs && {
        qs: this.constructor.cleanParameters(params.qs)
      }, params.body && {
        body: this.constructor.cleanParameters(params.body)
      }));
    }
    /**
     * Clean parameters object by filtering out undefineds.
     *
     * @param {Object} params the parameters object.
     * @returns {Object} the clean object of parameters
     * @static
     * @memberof ApiResource
     */

  }]);

  return ApiResource;
}();

ApiResource.cleanParameters = function (params) {
  return Object.keys(params).reduce(function (returns, element) {
    if (params[element] !== undefined) {
      return _extends({}, returns, _defineProperty({}, element, params[element]));
    }
    return returns;
  }, {});
};

exports.default = ApiResource;