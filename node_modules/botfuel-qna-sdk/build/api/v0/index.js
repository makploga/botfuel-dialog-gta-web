'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _apiResource = require('../api-resource');

var _apiResource2 = _interopRequireDefault(_apiResource);

var _config = require('../../config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var QnAV0 = function (_ApiResource) {
  _inherits(QnAV0, _ApiResource);

  function QnAV0(_ref) {
    var APP_ID = _ref.APP_ID,
        APP_KEY = _ref.APP_KEY;

    _classCallCheck(this, QnAV0);

    var _this = _possibleConstructorReturn(this, (QnAV0.__proto__ || Object.getPrototypeOf(QnAV0)).call(this));

    _this.headers = {
      'App-Id': APP_ID,
      'App-Key': APP_KEY
    };
    _this.API = _config.QNA_API_V0;
    return _this;
  }

  // ## Bots CRUD ## //

  _createClass(QnAV0, [{
    key: 'getBots',
    value: function getBots() {
      return this.curriedRp('/bots', {
        method: 'GET'
      });
    }
  }, {
    key: 'getBot',
    value: function getBot(_ref2) {
      var botId = _ref2.botId;

      return this.curriedRp('/bots/' + botId, {
        method: 'GET'
      });
    }
  }, {
    key: 'createBot',
    value: function createBot(_ref3) {
      var name = _ref3.name,
          language = _ref3.language,
          response_nb = _ref3.response_nb;

      return this.curriedRp('/bots', {
        method: 'POST',
        body: {
          name: name,
          language: language,
          response_nb: response_nb
        }
      });
    }
  }, {
    key: 'updateBot',
    value: function updateBot(_ref4) {
      var botId = _ref4.botId,
          name = _ref4.name,
          language = _ref4.language,
          response_nb = _ref4.response_nb;

      return this.curriedRp('/bots/' + botId, {
        method: 'PUT',
        body: {
          name: name,
          language: language,
          response_nb: response_nb
        }
      });
    }
  }, {
    key: 'deleteBot',
    value: function deleteBot(_ref5) {
      var botId = _ref5.botId;

      return this.curriedRp('/bots/' + botId, {
        method: 'DELETE'
      });
    }

    // ## QnAs CRUD ## //

  }, {
    key: 'getQnAs',
    value: function getQnAs(_ref6) {
      var botId = _ref6.botId,
          page = _ref6.page;

      return this.curriedRp('/bots/' + botId + '/qnas', {
        method: 'GET',
        qs: {
          page: page
        }
      });
    }
  }, {
    key: 'getQnA',
    value: function getQnA(_ref7) {
      var botId = _ref7.botId,
          qnaId = _ref7.qnaId;

      return this.curriedRp('/bots/' + botId + '/qnas/' + qnaId, {
        method: 'GET'
      });
    }
  }, {
    key: 'createQnA',
    value: function createQnA(_ref8) {
      var botId = _ref8.botId,
          name = _ref8.name,
          questions = _ref8.questions;

      return this.curriedRp('/bots/' + botId + '/qnas', {
        method: 'POST',
        body: {
          name: name,
          questions: questions
        }
      });
    }
  }, {
    key: 'updateQnA',
    value: function updateQnA(_ref9) {
      var botId = _ref9.botId,
          qnaId = _ref9.qnaId,
          name = _ref9.name,
          questions = _ref9.questions;

      return this.curriedRp('/bots/' + botId + '/qnas/' + qnaId, {
        method: 'PUT',
        body: {
          name: name,
          questions: questions
        }
      });
    }
  }, {
    key: 'deleteQnA',
    value: function deleteQnA(_ref10) {
      var botId = _ref10.botId,
          qnaId = _ref10.qnaId;

      return this.curriedRp('/bots/' + botId + '/qnas/' + qnaId, {
        method: 'DELETE'
      });
    }

    // ## Corpus CRUD ## //

  }, {
    key: 'getBotCorpus',
    value: function getBotCorpus(_ref11) {
      var botId = _ref11.botId,
          corpusId = _ref11.corpusId;

      return this.curriedRp('/bots/' + botId + '/corpus/' + corpusId, {
        method: 'GET'
      });
    }
  }, {
    key: 'createBotCorpus',
    value: function createBotCorpus(_ref12) {
      var botId = _ref12.botId,
          name = _ref12.name,
          words = _ref12.words;

      return this.curriedRp('/bots/' + botId + '/corpus', {
        method: 'POST',
        body: {
          name: name,
          words: words
        }
      });
    }
  }, {
    key: 'updateBotCorpus',
    value: function updateBotCorpus(_ref13) {
      var botId = _ref13.botId,
          corpusId = _ref13.corpusId,
          name = _ref13.name,
          words = _ref13.words;

      return this.curriedRp('/bots/' + botId + '/corpus/' + corpusId, {
        method: 'PUT',
        body: {
          name: name,
          words: words
        }
      });
    }
  }, {
    key: 'deleteBotCorpus',
    value: function deleteBotCorpus(_ref14) {
      var botId = _ref14.botId,
          corpusId = _ref14.corpusId;

      return this.curriedRp('/bots/' + botId + '/corpus/' + corpusId, {
        method: 'DELETE'
      });
    }

    // ## Test, training, stats, correlations, model, classification ## //

  }, {
    key: 'testBot',
    value: function testBot(_ref15) {
      var botId = _ref15.botId,
          threshold = _ref15.threshold;

      return this.curriedRp('/bots/' + botId + '/test', {
        method: 'GET',
        qs: {
          threshold: threshold
        }
      });
    }
  }, {
    key: 'trainBot',
    value: function trainBot(_ref16) {
      var botId = _ref16.botId;

      return this.curriedRp('/bots/' + botId + '/train', {
        method: 'GET'
      });
    }
  }, {
    key: 'getBotStats',
    value: function getBotStats(_ref17) {
      var botId = _ref17.botId;

      return this.curriedRp('/bots/' + botId + '/stats', {
        method: 'GET'
      });
    }
  }, {
    key: 'getBotCorrelations',
    value: function getBotCorrelations(_ref18) {
      var botId = _ref18.botId;

      return this.curriedRp('/bots/' + botId + '/correlations', {
        method: 'GET'
      });
    }
  }, {
    key: 'getBotCorrelation',
    value: function getBotCorrelation(_ref19) {
      var botId = _ref19.botId,
          qnaId = _ref19.qnaId;

      return this.curriedRp('/bots/' + botId + '/correlations/' + qnaId, {
        method: 'GET'
      });
    }
  }, {
    key: 'getBotModel',
    value: function getBotModel(_ref20) {
      var botId = _ref20.botId;

      return this.curriedRp('/bots/' + botId + '/model', {
        method: 'GET'
      });
    }
  }, {
    key: 'getMatchingQnas',
    value: function getMatchingQnas(_ref21) {
      var botId = _ref21.botId,
          sentence = _ref21.sentence;

      return this.curriedRp('/bots/' + botId + '/classify', {
        method: 'POST',
        body: {
          sentence: sentence
        }
      });
    }
  }]);

  return QnAV0;
}(_apiResource2.default);

exports.default = QnAV0;