'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var winston = require('winston');

var DEFAULT_TRANSPORTS = [new winston.transports.Console({
  json: false,
  colorize: true,
  prettyPrint: true,
  timestamp: true,
  handleExceptions: true,
  align: false,
  level: 'silly'
})];

/**
 * Logtown winston wrapper
 */

var Winston = function () {

  /**
   * @param {[]} transports
   * @param {{}} winstonOptions
   */
  function Winston() {
    var transports = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_TRANSPORTS;
    var winstonOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { exitOnError: true };

    _classCallCheck(this, Winston);

    this._logger = new winston.Logger(Object.assign({ exitOnError: true }, winstonOptions, { transports: transports }));
  }

  /**
   *
   * @param {string} id
   * @param {string} level
   * @param {{}} stats
   * @param {[]} rest
   */


  _createClass(Winston, [{
    key: 'log',
    value: function log(id, level, stats) {
      var _logger;

      for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        rest[_key - 3] = arguments[_key];
      }

      (_logger = this._logger)[level.toLowerCase()].apply(_logger, ['[' + id + ']'].concat(rest));
    }
  }]);

  return Winston;
}();

module.exports = Winston;
